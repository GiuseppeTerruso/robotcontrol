#Parameters: RF First Classification Layer - RF Second Classification Layer - Name of the volunteer

#Import required
import sys
from os import sep, mkdir
import numpy as np
from cv2 import *
from hand_grabber import PyOpenNIHandGrabber
from pose_recognizer import PyPoseRecognizer
import xml.etree.ElementTree as ET
import Image
from random import *
import time
from my_fun import *
from sklearn.externals import joblib
from hand import *
import base64
import datetime
import socket
from Crypto.Cipher import AES # encryption library

# the character used for padding--with a block cipher such as AES, the value
# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
# used to ensure that your value is always a multiple of BLOCK_SIZE
PADDING = '{'
BLOCK_SIZE = 64

# one-liner to sufficiently pad the text to be encrypted
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

# one-liners to encrypt/encode and decrypt/decode a string
# encrypt with AES, encode with base64
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

SIGN_LIST = ['A','B','C','D','F','H','I','K','L','O','P2','S1','V','W','X','Y']
SIGN_INDEX = 0
SIGN_SIZE = 16
MAX_POSES = 100

#Communication Parameters
PASSCODE = 'PARLOMA3'*2
SIGN_WINDOW_NUMBER = 5
IP = 'localhost'
#IP = '10.10.0.1'
PORT = 8089
#PORT = 9091

class ServerSocket:
    def __init__(self, IP, PORT, PASSCODE):
        self.server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        self.server_socket.bind((IP,PORT))
        self.server_socket.listen(1)
        self.decryptor = AESCipher(PASSCODE)
    #    self.hand = Hand('/dev/ttyUSB0')
    #    self.hand.soft_calibrate()
    #    self.hand.perform_sign('rest')
        self.hand = 0


    def start(self):
        print 'Server wainting on address = '+IP+'port ='+PORT
        while True:
            print 'waiting for client'
            client_socket, address = server_socket.accept(); 
            thread.start_new_thread(self.handController, (client_socket, address, self.hand))
            
    def handController(client_socket, address, hand, crypt):
        print 'Client Running, address =', address
    #    hand.soft_calibrate()
    #    hand.perform_sign('rest')
        actual_sign = 'rest'
        actual_counter = 0
        while True:
            buf = client_socket.recv(256)
        
            if len(buf) == 0: # client closed
                print 'Client Closed'
                return
            else:
                #buf = decryptor.decrypt(buf)
                decodeAES(crypt, buf)
                print buf
    #            print 'Command Received:', buf
                if buf == 'quit':
                    print 'Ok, Quitting'
                    return
                else:
                    if actual_sign == buf:
                        actual_counter += 1
    #                    if actual_counter == SIGN_WINDOW_NUMBER:
    #                        hand.perform_sign(buf)
    #                        print 'Sign Performed'
                    else:
                        actual_sign = buf
                        actual_counter = 1

#main
if __name__=="__main__":
    
    if len(sys.argv)!=2:
        print("Usage:Client > python script_name serial")

    else:
        server = ServerSocket(IP, PORT, 'P'*16)
        crypt = AES.new(PASSCODE)
        while True:
            # Accept and dispatch connection from client
            (SocketClient, address) = serversocket.accept()
            handController(SocketClient, address, crypt)
